&НаКлиенте
Перем МсСотрудникДолжности;

#Область Сервис

&НаСервереБезКонтекста
Функция ПолучитьСписокиДолжностейСотрудниковНаСервере(Дата, Ссылка)
	Запрос = Новый Запрос;
	#Область ТекстЗапросаДолжностейСотрудников
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НачислениеЗарплатыНачисления.Сотрудник КАК Сотрудник
		|ПОМЕСТИТЬ ВТ_Сотрудники
		|ИЗ
		|	Документ.НачислениеЗарплаты.Начисления КАК НачислениеЗарплатыНачисления
		|ГДЕ
		|	НачислениеЗарплатыНачисления.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	НачислениеЗарплатыНачисления.Сотрудник
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	НачислениеЗарплатыДополнительныеНачисления.Сотрудник
		|ИЗ
		|	Документ.НачислениеЗарплаты.ДополнительныеНачисления КАК НачислениеЗарплатыДополнительныеНачисления
		|ГДЕ
		|	НачислениеЗарплатыДополнительныеНачисления.Ссылка = &Ссылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Сотрудники.Сотрудник КАК Сотрудник,
		|	СведенияОСотрудникахСрезПоследних.Должность КАК Должность
		|ИЗ
		|	ВТ_Сотрудники КАК ВТ_Сотрудники
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОСотрудниках.СрезПоследних(&Дата, ) КАК СведенияОСотрудникахСрезПоследних
		|		ПО ВТ_Сотрудники.Сотрудник = СведенияОСотрудникахСрезПоследних.Сотрудник
		|			И (СведенияОСотрудникахСрезПоследних.Оклад > 0)
		|ИТОГИ
		|	КОЛИЧЕСТВО(Должность)
		|ПО
		|	Сотрудник";
	#КонецОбласти
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	РезультатЗапроса = Запрос.Выполнить();//РезультатЗапроса.Выгрузить()
	ВыборкаСотрудник = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	МсДолжности = Новый Массив();
	Пока ВыборкаСотрудник.Следующий() Цикл
		СотрДол = Новый Структура("ФЛ,СписокДол", ВыборкаСотрудник.Сотрудник, Новый Массив());
		МсДолжности.Добавить(СотрДол);
		Если ВыборкаСотрудник.Должность = Null Тогда
			Продолжить;
		КонецЕсли;
		ВыборкаСД = ВыборкаСотрудник.Выбрать();
		Пока ВыборкаСД.Следующий() Цикл					
			СотрДол.СписокДол.Добавить(ВыборкаСД.Должность);
		КонецЦикла;
	КонецЦикла;
	Возврат МсДолжности;
КонецФункции

&НаКлиенте
Процедура ИнициализацияСпискаДолжностей()
	Если Объект.Начисления.Количество()=0 И Объект.ДополнительныеНачисления.Количество()=0 Тогда
		МсСотрудникДолжности = Новый Массив;
	Иначе 	
	    МсСотрудникДолжности = ПолучитьСписокиДолжностейСотрудниковНаСервере(Объект.Дата, Объект.Ссылка);
	КонецЕсли;
КонецПроцедуры	

&НаКлиенте
Процедура ОбновитьСписокиДолжностейСотрудников(Сотрудник)	
	Для каждого СотрДол Из МсСотрудникДолжности Цикл
		Если СотрДол.ФЛ = Сотрудник Тогда		
			Возврат;
		КонецЕсли;	
	КонецЦикла;
	СписокДолжностей = СервисВызовСервера.ПолучитьСписокДолжностей(Сотрудник);
	МсСотрудникДолжности.Добавить(Новый Структура("ФЛ,СписокДол", Сотрудник, СписокДолжностей));
КонецПроцедуры	

&НаКлиенте
Функция ПолучитьСписокДолжностейСотрудника(Сотрудник)
	Для каждого СотрДол Из МсСотрудникДолжности Цикл
		Если СотрДол.ФЛ = Сотрудник Тогда
			Возврат СотрДол.СписокДол;
		КонецЕсли;				
	КонецЦикла;
	Возврат Новый Массив();
КонецФункции 

#КонецОбласти
		
#Область События 

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ОсновнойГрафикРаботы = Константы.ОсновнойГрафикРаботы.Получить();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ИнициализацияСпискаДолжностей();
	ТекущийМесяц = НачалоМесяца(ТекущаяДата());
	Для ЧисМесяца = 0 По 11 Цикл
		НачМесяц = ДобавитьМесяц(ТекущийМесяц, -ЧисМесяца);
		Элементы.ПериодРасчета.СписокВыбора.Добавить(НачМесяц, Формат(НачМесяц, "ДФ='MMMM yyyy'"));
	КонецЦикла;
	Объект.ПериодРасчета = ?(ЗначениеЗаполнено(Объект.ПериодРасчета), Объект.ПериодРасчета, НачалоМесяца(ТекущаяДата()));
    
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если Копирование Тогда
		ТекСтрока = Элементы.Начисления.ТекущиеДанные;
		ТекСтрока.Сотрудник = Неопределено;
		ТекСтрока.Должность = Неопределено;
	ИначеЕсли НоваяСтрока Тогда
		ТекСтрока = Элементы.Начисления.ТекущиеДанные;
		ТекСтрока.ДатаНачала = Объект.ПериодРасчета;
	    ТекСтрока.ДатаОкончания = КонецМесяца(Объект.ПериодРасчета);
		ТекСтрока.График = ОсновнойГрафикРаботы;	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеНачисленияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если Копирование Тогда
		ТекСтрока = Элементы.ДополнительныеНачисления.ТекущиеДанные;
		Если Строка(ТекСтрока.ВидНачисления) = "Премия" Тогда
			ТекСтрока.Сотрудник = Неопределено;
			ТекСтрока.Должность = Неопределено;
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НачисленияДатаНачалаПриИзменении(Элемент)
	ТекСтрока = Элементы.Начисления.ТекущиеДанные;
	Если ТекСтрока.ДатаНачала < Объект.ПериодРасчета Тогда
		ТекСтрока.ДатаНачала = Объект.ПериодРасчета;
	ИначеЕсли ТекСтрока.ДатаНачала > ТекСтрока.ДатаОкончания Тогда
		ТекСтрока.ДатаНачала = ТекСтрока.ДатаОкончания;	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НачисленияДатаОкончанияПриИзменении(Элемент)
	ТекСтрока = Элементы.Начисления.ТекущиеДанные;
	Если ТекСтрока.ДатаОкончания > КонецМесяца(Объект.ПериодРасчета) Тогда
		ТекСтрока.ДатаОкончания = КонецМесяца(Объект.ПериодРасчета);
	ИначеЕсли ТекСтрока.ДатаОкончания < ТекСтрока.ДатаНачала Тогда
		ТекСтрока.ДатаОкончания = ТекСтрока.ДатаНачала;	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПериодРасчетаПриИзменении(Элемент)
	Если Объект.Начисления.Количество() Тогда	
		ГодПериода = Год(Объект.ПериодРасчета);
		МесяцПериода = Месяц(Объект.ПериодРасчета);
		ГодПериодаТек = Год(Объект.Начисления[0].ДатаНачала);
		МесяцПериодаТек = Месяц(Объект.Начисления[0].ДатаНачала);
		ЧислоМесяцев = МесяцПериода - МесяцПериодаТек + 12 * (ГодПериода - ГодПериодаТек);
		Если ЧислоМесяцев Тогда
			Для каждого ТекСтрока Из Объект.Начисления Цикл	
				ТекСтрока.ДатаНачала = ДобавитьМесяц(ТекСтрока.ДатаНачала, ЧислоМесяцев);   
				КонМес = День(ТекСтрока.ДатаОкончания) = День(КонецМесяца(ТекСтрока.ДатаОкончания));
				ТекСтрока.ДатаОкончания = ДобавитьМесяц(ТекСтрока.ДатаОкончания, ЧислоМесяцев);
				Если КонМес Тогда
					ТекСтрока.ДатаОкончания = КонецМесяца(ТекСтрока.ДатаОкончания);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры 

&НаКлиенте
Процедура СтрокаТЧОбработкаВыбора(ИмяТаблицы, ИмяРеквизита, ВыбранноеЗначение, СтандартнаяОбработка)
	ТекСтрока = Элементы[ИмяТаблицы].ТекущиеДанные;
	ТекЗначение = ТекСтрока[ИмяРеквизита];
	Если ТекЗначение = ВыбранноеЗначение Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	ТекСтрока[ИмяРеквизита] = ВыбранноеЗначение;
	ЗначенияСтрокиЗаполнены = (ЗначениеЗаполнено(ТекСтрока.Сотрудник) И ЗначениеЗаполнено(ТекСтрока.Должность) И ЗначениеЗаполнено(ТекСтрока.ВидНачисления));
	Если ЗначенияСтрокиЗаполнены Тогда
		СтрВидНачисления = Строка(ТекСтрока.ВидНачисления);
		СообщениеКонец = "";
		Если "Оклад" = СтрВидНачисления Тогда
			СообщениеКонец = " оклад.";	
		ИначеЕсли "Премия" = СтрВидНачисления Тогда
	       	СообщениеКонец = "а премия.";
		КонецЕсли; 
		Если СообщениеКонец <> "" Тогда
			Для каждого СтрокаТЧ Из Объект[ИмяТаблицы] Цикл	
				Если ТекСтрока <> СтрокаТЧ И
					ТекСтрока.Сотрудник = СтрокаТЧ.Сотрудник И
					ТекСтрока.Должность = СтрокаТЧ.Должность И 
					ТекСтрока.ВидНачисления = СтрокаТЧ.ВидНачисления Тогда
					СервисКлиентСервер.СообщитьПользователю(
						СтрШаблон("Сотруднику ""%1"" на должности ""%2"" уже начислен"+СообщениеКонец, СтрокаТЧ.Сотрудник, СтрокаТЧ.Должность),
						"Объект."+ИмяТаблицы+"["+(СтрокаТЧ.НомерСтроки-1)+"].Сотрудник"
					);
				    СтандартнаяОбработка = Ложь;
					Прервать;
				КонецЕсли;	
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	ТекСтрока[ИмяРеквизита] = ТекЗначение;
КонецПроцедуры	

&НаКлиенте
Процедура НачисленияСотрудникОбработкаВыбора(Элемент, ВыбранноеЗначение, ДополнительныеДанные, СтандартнаяОбработка)
	СтрокаТЧОбработкаВыбора("Начисления", "Сотрудник", ВыбранноеЗначение, СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		ОбновитьСписокиДолжностейСотрудников(ВыбранноеЗначение);
		Элементы.Начисления.ТекущиеДанные.Должность = Неопределено;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НачисленияДолжностьОбработкаВыбора(Элемент, ВыбранноеЗначение, ДополнительныеДанные, СтандартнаяОбработка)
	СтрокаТЧОбработкаВыбора("Начисления", "Должность", ВыбранноеЗначение, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияВидНачисленияОбработкаВыбора(Элемент, ВыбранноеЗначение, ДополнительныеДанные, СтандартнаяОбработка)
	СтрокаТЧОбработкаВыбора("Начисления", "ВидНачисления", ВыбранноеЗначение, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеНачисленияСотрудникОбработкаВыбора(Элемент, ВыбранноеЗначение, ДополнительныеДанные, СтандартнаяОбработка)
	СтрокаТЧОбработкаВыбора("ДополнительныеНачисления", "Сотрудник", ВыбранноеЗначение, СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		ОбновитьСписокиДолжностейСотрудников(ВыбранноеЗначение);
		Элементы.ДополнительныеНачисления.ТекущиеДанные.Должность = Неопределено;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеНачисленияДолжностьОбработкаВыбора(Элемент, ВыбранноеЗначение, ДополнительныеДанные, СтандартнаяОбработка)
	СтрокаТЧОбработкаВыбора("ДополнительныеНачисления", "Должность", ВыбранноеЗначение, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеНачисленияВидНачисленияОбработкаВыбора(Элемент, ВыбранноеЗначение, ДополнительныеДанные, СтандартнаяОбработка)
	СтрокаТЧОбработкаВыбора("ДополнительныеНачисления", "ВидНачисления", ВыбранноеЗначение, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПриАктивизацииЯчейки(Элемент)
	Если Элемент.ТекущийЭлемент = Элементы.НачисленияДолжность Или 
		Элемент.ТекущийЭлемент = Элементы.ДополнительныеНачисленияДолжность Тогда		
		Элемент.ТекущийЭлемент.СписокВыбора.ЗагрузитьЗначения(
			ПолучитьСписокДолжностейСотрудника(Элемент.ТекущиеДанные.Сотрудник)
		);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти




