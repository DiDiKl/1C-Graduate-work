&НаКлиенте
Перем ДанныеТекстДокумента;
 
#Область Сервис

&НаКлиенте
Процедура ОчиститьДанные()
	ДанныеТекстДокумента.Очистить();
	Объект.СписокТоваров.Очистить();
	Объект.СписокОтсутствующихТоваров.Очистить();
КонецПроцедуры

// Функция - Открыть файл ТД
// Читает файла по имени указанном в "Объект.ПутьКФайлу" и возвращает структуру с свойствами: 
// "КоличествоКолонок" - Кол-во колонок в документе;
// "ИндексНаименование", "ИндексЦена", "ИндексКоличество", "ИндексСтоимость" - Индекс позиции колонки.
// Если не указано имя файла, не удалось прочитать файл или он пустой, отсутствуеют основные колоник, будет выведено сообщение об ошибке.
// Возвращаемое значение:
//  ТекстовыйДокумент - Открытый текстовый документ. При наличии ошибок, возвращает Неопределено.
&НаКлиенте
Функция ОткрытьФайлТД()
	ТекстДок = Новый ТекстовыйДокумент;
	ТекстДок.Прочитать(Объект.ПутьКФайлу);
	Если ТекстДок.КоличествоСтрок() = 0 Тогда
		СервисКлиентСервер.СообщитьПользователю("Не удалсь прочитать файл.", "Объект.ПутьКФайлу");
		Возврат Неопределено;
	КонецЕсли;
	
	МсКолонкиВТекДок = СтрРазделить(ТекстДок.ПолучитьСтроку(1), ";");
	
	// Новый Структура();
	ДанныеТекстДокумента.Вставить("КоличествоКолонок", МсКолонкиВТекДок.Количество());
	
	СКолонки = Новый Структура;
	СКолонки.Вставить("Товар", "ИндексНаименование");
	СКолонки.Вставить("Цена", "ИндексЦена");
	СКолонки.Вставить("Количество", "ИндексКоличество");
	СКолонки.Вставить("Стоимость", "ИндексСтоимость");
	
	МсСтрКолонкиОтсутствующие = Новый Массив;
	
	Для каждого КЗКолонка Из СКолонки Цикл			
		НазваниеКолонки = КЗКолонка.Ключ;
		КолонкаОтсутствует = Истина;
		Для Инд = 0 По МсКолонкиВТекДок.ВГраница() Цикл
			НазваниеКолонкиТД = МсКолонкиВТекДок[Инд];
			Если СтрСравнить(НазваниеКолонкиТД, НазваниеКолонки) = 0 Тогда
				ДанныеТекстДокумента.Вставить(КЗКолонка.Значение, Инд);
				КолонкаОтсутствует = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если КолонкаОтсутствует Тогда
			МсСтрКолонкиОтсутствующие.Добавить(НазваниеКолонки);	
		КонецЕсли;	
	КонецЦикла;
	
	Если МсСтрКолонкиОтсутствующие.Количество() Тогда 
		Если МсСтрКолонкиОтсутствующие.Количество() = 1 Тогда		
			СервисКлиентСервер.СообщитьПользователю("В файле отсутствует колонка: """+МсСтрКолонкиОтсутствующие[0]+""".", "Объект.ПутьКФайлу");	
		Иначе
			СтрКолонки = СтрСоединить(МсСтрКолонкиОтсутствующие, """, """);
			СервисКлиентСервер.СообщитьПользователю("В файле отсутствуют колонки: """+СтрКолонки+""".", "Объект.ПутьКФайлу");
		КонецЕсли;
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ТекстДок;
КонецФункции // ОткрытьТекстовыйДокумент()

&НаСервереБезКонтекста
Функция ПолучитьСписокНоменклатурыНаСервере(Знач СписокНаименований)
	СписокНоменклатуры = Новый Массив;
	Для каждого Наименование Из СписокНаименований Цикл
		СслНомен = Справочники.Номенклатура.НайтиПоНаименованию(Наименование, Истина);
		СписокНоменклатуры.Добавить(СслНомен);
	КонецЦикла;	
    Возврат СписокНоменклатуры;
КонецФункции //

&НаКлиенте
Функция СформироватьСписокНоменклатурыУдалитьПустыеСтрокиИзТекДок(ТекстДок)
	ДанныеТекстДокумента.Вставить("КоличествоПустыхСтрок", 0);
	ИндТовар = ДанныеТекстДокумента.ИндексНаименование;
	МсТовары = Новый Массив;
	НомерСтр = 2;
	КолвоСтр = ТекстДок.КоличествоСтрок();
	Пока НомерСтр <= КолвоСтр Цикл
		СтрокаТД = ТекстДок.ПолучитьСтроку(НомерСтр);
		МсЗначения = СтрРазделить(СтрокаТД, ";");
		НаимнованиеТовара = МсЗначения[ИндТовар];
		Если НаимнованиеТовара = "" Тогда 
			ДанныеТекстДокумента.КоличествоПустыхСтрок = ДанныеТекстДокумента.КоличествоПустыхСтрок + 1;
			ТекстДок.УдалитьСтроку(НомерСтр);
			КолвоСтр = ТекстДок.КоличествоСтрок();
		Иначе
			МсТовары.Добавить(НаимнованиеТовара);
			НомерСтр = НомерСтр + 1;
		КонецЕсли;
	КонецЦикла;
	Возврат ?(МсТовары.Количество(), ПолучитьСписокНоменклатурыНаСервере(МсТовары), Неопределено); 	
КонецФункции

&НаКлиенте
Функция ЗаполнитьСписокТоваров(ТекстДок)
	МсСписокНоменклатуры = СформироватьСписокНоменклатурыУдалитьПустыеСтрокиИзТекДок(ТекстДок);
	Если МсСписокНоменклатуры = Неопределено Тогда
		СервисКлиентСервер.СообщитьПользователю("Не удалось заполнить список товаров, данные в файле отсутствуют.", "Объект.ПутьКФайлу"); 		
		Возврат Ложь;	
	КонецЕсли;
	
	ДанныеТекстДокумента.Вставить("КоличествоНеверныхСтоимостей", 0);
	
	ИндГраница = МсСписокНоменклатуры.ВГраница();
	Для Инд = 0 По ИндГраница Цикл
		СслНомен = МсСписокНоменклатуры[Инд];
		МсСтрокаТД = СтрРазделить(ТекстДок.ПолучитьСтроку(Инд+2), ";");
		Если Не СслНомен.Пустая() Тогда 
			СтрокаСпТов = Объект.СписокТоваров.Добавить();
			СтрокаСпТов.Номенклатура = СслНомен;
			ЗаполнитьСтрокуТЧСтрокойТД(СтрокаСпТов, МсСтрокаТД);
			ПроверитьСтоимостьСтроки(СтрокаСпТов);
		Иначе 
			СтрокаСпОтсТов = Объект.СписокОтсутствующихТоваров.Добавить();
			СтрокаСпОтсТов.КДобавлению = Истина;
			ЗаполнитьСтрокуТЧСтрокойТД(СтрокаСпОтсТов, МсСтрокаТД);
	    КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
КонецФункции //

&НаКлиенте
Процедура ЗаполнитьСтрокуТЧСтрокойТД(СтрокаТЧ, МсСтрокаТД) 
	Если СтрокаТч.Свойство("Наименование") Тогда
		СтрокаТЧ.Наименование = МсСтрокаТД[ДанныеТекстДокумента.ИндексНаименование];
	КонецЕсли;
	СтрокаТЧ.Цена 		 = Число(МсСтрокаТД[ДанныеТекстДокумента.ИндексЦена]);
	СтрокаТЧ.Количество  = Число(МсСтрокаТД[ДанныеТекстДокумента.ИндексКоличество]);
	СтрокаТЧ.Стоимость 	 = Число(МсСтрокаТД[ДанныеТекстДокумента.ИндексСтоимость]);	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСтоимостьСтроки(СтрокаТЧ)
	Стоимость = СтрокаТЧ.Цена * СтрокаТЧ.Количество;
	Если СтрокаТЧ.Стоимость <> Стоимость Тогда
		СтрокаТЧ.Стоимость = Стоимость;
	    СтрокаТЧ.НевернаяСтоимостьТД = Истина;
		ДанныеТекстДокумента.КоличествоНеверныхСтоимостей = ДанныеТекстДокумента.КоличествоНеверныхСтоимостей + 1;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СообщитьНеверныеСтоимости()
	Если ДанныеТекстДокумента.КоличествоНеверныхСтоимостей > 0 Тогда
		СервисКлиентСервер.СообщитьПользователю(
			"Предупреждение: Файл содержит позиции с неверными стоимостями (в списке выделыны красным) в количестве: "+
			ДанныеТекстДокумента.КоличествоНеверныхСтоимостей
		);	
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область События 

&НаКлиенте
Процедура ПутьКФайлуНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	Объект.ПутьКФайлу = ОкноКлиент.ВыбратьФайл("CSV файл;CSV file", "*.csv");
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	РкОперация = Элементы.Операция.СписокВыбора[0];
	Элементы.СцТоварыОтсутсвтующиеВСправочнике.Видимость = Ложь;
	Если Не (РольДоступна("Кладовщик") Или РольДоступна("Администратор")) Тогда
		Команды.Найти("ДобавитьВСправочник").Подсказка = "Добавлять в справочник могут пользователи с правами: ""Кладовщик"" или ""Администратор""";		
		Элементы.СписокОтсутствующихТоваровДовабвитьВСправочник.Доступность = Ложь;	
	КонецЕсли;
	
КонецПроцедуры  

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ДанныеТекстДокумента = Новый Структура;
КонецПроцедуры

&НаКлиенте
Процедура СписокТоваровЦенаКоличествоПриИзменении(Элемент)
	ТекСтрока = Элементы.СписокТоваров.ТекущиеДанные;
	ТекСтрока.Стоимость = ТекСтрока.Цена * ТекСтрока.Количество;
	ТекСтрока.НевернаяСтоимостьТД = Ложь;
КонецПроцедуры

#КонецОбласти


#Область Команды

&НаКлиенте
Процедура Загрузить(Команда)
	Если Не ЗначениеЗаполнено(Объект.ПутьКФайлу) Тогда
		СервисКлиентСервер.СообщитьПользователю("Путь к файлу не указан.", "Объект.ПутьКФайлу");
		Возврат;
	КонецЕсли;
	ОчиститьДанные();
	ТекстДок = ОткрытьФайлТД();
	Если ТекстДок = Неопределено Тогда			
		Возврат;
	КонецЕсли;
	Если ЗаполнитьСписокТоваров(ТекстДок) Тогда
		Если ДанныеТекстДокумента.КоличествоПустыхСтрок > 0 Тогда
			СервисКлиентСервер.СообщитьПользователю(
			"Предупреждение: Файл содержит строки с пустым наименованием в количестве: "+ДанныеТекстДокумента.КоличествоПустыхСтрок
			);	
		КонецЕсли;
		СообщитьНеверныеСтоимости();
		Если Объект.СписокОтсутствующихТоваров.Количество() Тогда
			Элементы.СцТоварыОтсутсвтующиеВСправочнике.Видимость = Истина;
			СервисКлиентСервер.СообщитьПользователю("Файл содержит товары не найденные в справочнике Номенклатуры. 
			|Список этих товаров можно посмотреть на вкладке ""Товары отсутсвтующие в справочнике""");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокумент(Команда)
	СтрИмяФормы = ?(РкОперация = "ПТ", "Документ.ПоступлениеТоваров.Форма.ФормаДокумента", "Документ.РеализацияТоваров.Форма.ФормаДокумента");
	Форма = ПолучитьФорму(СтрИмяФормы);
	Форма.Объект.Контрагент = РкКонтрагент;
	Форма.Объект.Договор = РкДоговор;
	ТоварыДокумента = Форма.Объект.Товары;
	Для каждого Товар Из Объект.СписокТоваров Цикл
		ЗаполнитьЗначенияСвойств(ТоварыДокумента.Добавить(), Товар);
	КонецЦикла;
	Форма.Объект.ИтоговаяСумма = ТоварыДокумента.Итог("Стоимость");
	Форма.Открыть();
КонецПроцедуры 

&НаКлиенте
Процедура УстановитьВидНоменклатуры(Команда)
	Установить = Команда.Имя = "УстановитьВидНоменклатурыВсем"; 
	Для каждого Товар Из Объект.СписокОтсутствующихТоваров Цикл
		Если Установить Или Товар.КДобавлению Тогда
			Товар.ВидНоменклатуры = РкВидНоменклатурыУстанов;
		КонецЕсли;			
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлаг(Команда)
	Флаг = Команда.Имя = "ВыбратьВсе";
	Для каждого Товар Из Объект.СписокОтсутствующихТоваров Цикл
		Товар.КДобавлению = Флаг;	
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВСправочник(Команда)
	СписокТоваров = Новый Массив;
	Отказ = Ложь;
	Для каждого Товар Из Объект.СписокОтсутствующихТоваров Цикл
		Если Товар.КДобавлению Тогда 
			Если Не ЗначениеЗаполнено(Товар.ВидНоменклатуры) Тогда
				СервисКлиентСервер.СообщитьПользователю(
					"Вид товара не указан.", 
					СтрШаблон("Объект.СписокОтсутствующихТоваров[%1].ВидНоменклатуры", Товар.НомерСтроки-1)
				);
				Отказ = Истина;
			КонецЕсли;
			Если Отказ Тогда Продолжить; КонецЕсли;
			ТоварДанные = Новый Структура("НомерСтроки,Группа,ВидНоменклатуры,Наименование");
			ТоварДанные.НомерСтроки = Товар.НомерСтроки;
			ТоварДанные.Группа = Товар.Группа;
			ТоварДанные.ВидНоменклатуры = Товар.ВидНоменклатуры;
			ТоварДанные.Наименование = Товар.Наименование;
			СписокТоваров.Добавить(ТоварДанные);
		КонецЕсли;			
	КонецЦикла;
	Если Отказ Или СписокТоваров.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	СписокТоваров = ДобавитьВСправочникНаСервере(СписокТоваров);
	Для каждого Товар Из СписокТоваров Цикл
		Инд = Товар.НомерСтроки - 1;
		ТоварСОТ = Объект.СписокОтсутствующихТоваров[Инд]; 
		
		СтрокаТЧ = Объект.СписокТоваров.Добавить();
		СтрокаТЧ.Номенклатура = Товар.Ссылка;
		СтрокаТЧ.Цена = ТоварСОТ.Цена;
		СтрокаТЧ.Количество = ТоварСОТ.Количество;
		СтрокаТЧ.Стоимость = ТоварСОТ.Стоимость;
		ПроверитьСтоимостьСтроки(СтрокаТЧ);
	КонецЦикла;
	
	Инд = Объект.СписокОтсутствующихТоваров.Количество()-1;
	Пока Инд > -1 Цикл
		 Если Объект.СписокОтсутствующихТоваров[Инд].КДобавлению Тогда
			Объект.СписокОтсутствующихТоваров.Удалить(Инд);
		КонецЕсли;
		Инд = Инд - 1;
	КонецЦикла;
	
	СервисКлиентСервер.СообщитьПользователю(
		"Товары добавлены в справочник ""Номенклатура"" и перенесены из списка товаров отсутствующих в справочнике в основной список товаров."
	);
	СообщитьНеверныеСтоимости();
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДобавитьВСправочникНаСервере(Знач СписокТоваров)
	СписокСслТоваров = Новый Массив;
	Для каждого Товар Из СписокТоваров Цикл
		ТоварДанные = Новый Структура("НомерСтроки,Ссылка");
		ТоварДанные.НомерСтроки = Товар.НомерСтроки;
		НоменклатураСсл = Справочники.Номенклатура.НайтиПоНаименованию(Товар.Наименование);
		Если Не ЗначениеЗаполнено(НоменклатураСсл) Тогда
			НоменклатураНовая = Справочники.Номенклатура.СоздатьЭлемент();
			НоменклатураНовая.Наименование = Товар.Наименование;
			НоменклатураНовая.ВидНоменклатуры = Товар.ВидНоменклатуры;
			НоменклатураНовая.Родитель = Товар.Группа;
			НоменклатураНовая.Записать();
			ТоварДанные.Ссылка = НоменклатураНовая.Ссылка;
		Иначе
			ТоварДанные.Ссылка = НоменклатураСсл;	
		КонецЕсли;
		СписокСслТоваров.Добавить(ТоварДанные);
	КонецЦикла;
	Возврат СписокСслТоваров;
КонецФункции

#КонецОбласти